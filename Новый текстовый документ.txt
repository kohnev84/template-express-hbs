https://www.instagram.com/p/CGb01big4Nj/?utm_source=ig_web_copy_link

1. В терминале даем команду npm init чтобы создать файл package.json  (для тестового приложения можно пропустить все разделы нажимая enter)

2 Устанавливаем  npm i -D http-errors express morgan nodemon hbs
Express - библиотека для создания сервера
http-errors  - для демонстрации ошибок сервера  (необязательно, но желательно)
morgan  - для просмотра в терминале всего что отправляется от сервера клиенту и обратно 
nodemon  - для автоматического перезапуска приложения при его написании (упрощает и ускоряет работу)
hbs - шаблонизатор для визульной отрисовки  приложения 


3. Создам файл в котором прописываем подключения (обычно с названием app.js)

const express = require("express");
const app = express();
const path = require('path');
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// Подключаем статику
app.use(express.static(path.join(__dirname, 'public')));

// Подключаем views(hbs)
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'hbs');

// Отображаем главную страницу с использованием шаблона "index.hbs"
app.get('/', function (req, res) {
    res.render('index', req.query);
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log("Listening on " + port));

4. Проверяем работу Express запуском в терминале командой Node App.js. Открываем браузер по адресу http://localhost:3000/ и если видим ошибку о том, что не найден файл в папке views, то все сделано правильно 

5. Создаем в директории проекта папку views, в которой создаем файл index.hbs, где будет размещен наш код. Создаем также файл layout.hbs, в котором создаем Html шаблон и элементы, которые будут видны на всех страницах нашего проекта . В body (тело) файла layout.hbs вставляем  тег {{{body}}} в котором будут отображаться все остальные файлы index.hbs, которые мы создадим.  
6.   Напишем <h1>Hello world!</h1> и еще раз запустим сервер на http://localhost:3000/ 
7. Создадим в директории проекта папку public, которую мы уже заранее подключили в файле app.js командой 
// Подключаем статику
app.use(express.static(path.join(__dirname, 'public')));
Здесь в данной папке будут храниться стили css, папки с картинками, отображаемые на стороне клиента и файлы js для взаимодействия со страницей, если это понадобится  
8. Создадим в папке public файл index.css, в котором зададим фон страницы body{
    background-color: aquamarine;
}
Проверим.
9. Фон не задан. Причины 2 - не подключен файл index.css, не перезапущен сервер. Заходим снова в файл layout.hbs, подключаем файл  index.css как обычный css файл. Перезапускаем сервер  командой Node App.js. Открываем браузер по адресу http://localhost:3000/. Фон появился. 
10. Для того чтобы постоянно не перезапускать наш сервер давайте активируем предварительно установленную нами библиотеку nodemon. Откроем файл packaje Json и lдобавим к объекту scrypts значение start в следующем виде "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "nodemon app.js"
  }. 
Перезапустим сервер командой npm start. Теперь сервер запущен и работает с автоматическим перезапуском при изменениях в любом файле создаваемого приложения.
11.  Создаем простую форму ввода на странице index.hbs 
<form action="/send">
    <p>Введите имя: <input type="text" name='name'></p>
    <p>Введите возраст: <input type="text" name='age'></p>
    <input type="submit" value="Отправка">
</form>

12. Попробуем ввести имя и возраст и нажать кнопку отправить. Заметим в строке браузера появившуюся строку http://localhost:3000/send?name=%D0%98%D0%B3%D0%BE%D1%80%D1%8C&age=33  

13. Создаем в файле app.js роутер  /send, на который будем оправлять наши имя и возраст. 
Роутер создадим таким образом 

app.get('/send', function (req, res) {
    console.log('Получаем данные через GET запрос', req.query)
    res.end()
    // res.render('index', req.query);
});

14. Теперь можно сохранять наши данные любым удобным способом (записать в файл, отправить на мейл, сохранить в базах данных).
Однако мы увидим что данные отправляются через видимую адресную строку браузера. Это не очень хорошо и безопасно, кто-то за спиной может увидеть ваши данные, например пароль. Чтобы отправить данные скрыто - используем POST запрос . Пропишем еще один роут в файле app.js 

app.post('/send', function (req, res) {
    console.log('Получаем данные через POST запрос', req.body)
    res.end()
    // res.render('index', req.query);
});

А в наш открывающийся тег формы <form action="/send"> запишем  строку method="POST" (если этой записи нет, то по умолчанию это отправляется GET запрос).

Однако этого пока недостаточно и нам необходимо подключить предварительно нами установленную библиотеку body-parser следующим образом 

var bodyParser = require('body-parser')
app.use(bodyParser.json());

app.use(bodyParser.urlencoded({
    extended: true
}));

Теперь заполним форму и повторим отправку данных, проверим в терминале и увидим полученные данные.






Руководство по работе с Express 
https://expressjs.com/ru/guide/error-handling.html


методы ответа в Express 

https://expressjs.com/ru/guide/routing.html 

как передавать параметры через get запрос 
https://www.youtube.com/watch?v=7H1sadN2KuY